// Copyright (c) 2019-2021 ReactiveUI Association Incorporated. All rights reserved.
// ReactiveUI Association Incorporated licenses this file to you under the MIT license.
// See the LICENSE file in the project root for full license information.

using System.Text;

namespace ReactiveMarbles.PropertyChanged.SourceGenerator
{
    internal sealed record StringBuilderExtensionClassCreator : ISourceCreator
    {
        public string Create(ExtensionClassDatum classDatum)
        {
            var sb = new StringBuilder();
            sb.Append(StringBuilderSourceCreatorHelper.GetAutoGeneratedString());

            foreach (MethodDatum methodDatum in classDatum.MethodData)
            {
                sb.AppendLine(methodDatum.CreateSource(this));
            }

            string methodSource = sb.ToString();
            return StringBuilderSourceCreatorHelper.GetClass(methodSource);
        }

        public string Create(SingleExpressionDictionaryImplMethodDatum methodDatum)
        {
            var mapEntrySb = new StringBuilder();
            foreach (MapEntryDatum entry in methodDatum.Map.Entries)
            {
                var valueChainSb = new StringBuilder();
                foreach ((string name, string inputType, string outputType) in entry.Members)
                {
                    valueChainSb.Append(StringBuilderSourceCreatorHelper.GetMapEntryChain(inputType, outputType, name));
                }

                mapEntrySb.Append(StringBuilderSourceCreatorHelper.GetMapEntry(entry.Key, valueChainSb.ToString()));
            }

            string mapEntryString = mapEntrySb.ToString();

            string map = StringBuilderSourceCreatorHelper.GetMap(methodDatum.InputTypeName, methodDatum.OutputTypeName, methodDatum.Map.MapName, mapEntryString);

            string method = StringBuilderSourceCreatorHelper.GetWhenChangedMethodForMap(methodDatum.InputTypeName, methodDatum.OutputTypeName, methodDatum.AccessModifier, methodDatum.Map.MapName);

            return map + "\n" + method;
        }

        public string Create(SingleExpressionOptimizedImplMethodDatum methodDatum)
        {
            var sb = new StringBuilder();
            foreach ((string name, string inputType, string outputType) in methodDatum.Members)
            {
                sb.Append(StringBuilderSourceCreatorHelper.GetMapEntryChain(inputType, outputType, name));
            }

            return StringBuilderSourceCreatorHelper.GetWhenChangedMethodForDirectReturn(methodDatum.InputTypeName, methodDatum.OutputTypeName, methodDatum.AccessModifier, sb.ToString());
        }

        public string Create(MultiExpressionMethodDatum methodDatum)
        {
            string expressionParameters = StringBuilderSourceCreatorHelper.GetMultiExpressionMethodParameters(methodDatum.InputTypeFullName, methodDatum.OutputTypeFullName, methodDatum.TempReturnTypes);
            string body = StringBuilderSourceCreatorHelper.GetMultiExpressionMethodBody(methodDatum.TempReturnTypes.Count);

            return StringBuilderSourceCreatorHelper.GetMultiExpressionMethod(methodDatum.InputTypeFullName, methodDatum.OutputTypeFullName, methodDatum.AccessModifier, expressionParameters, body);
        }
    }
}
