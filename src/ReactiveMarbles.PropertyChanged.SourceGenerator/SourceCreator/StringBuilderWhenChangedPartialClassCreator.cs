// Copyright (c) 2019-2021 ReactiveUI Association Incorporated. All rights reserved.
// ReactiveUI Association Incorporated licenses this file to you under the MIT license.
// See the LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;
using System.Text;

namespace ReactiveMarbles.PropertyChanged.SourceGenerator
{
    internal sealed record StringBuilderWhenChangedPartialClassCreator : ISourceCreator
    {
        public string Create(IEnumerable<IDatum> sourceDatums)
        {
            var sb = new StringBuilder();
            foreach (var datum in sourceDatums)
            {
                sb.AppendLine(datum switch
                {
                    PartialClassDatum partialClass => Create(partialClass),
                    SingleExpressionDictionaryImplMethodDatum methodDatum => Create(methodDatum),
                    SingleExpressionOptimizedImplMethodDatum methodDatum => Create(methodDatum),
                    MultiExpressionMethodDatum methodDatum => Create(methodDatum),
                    _ => throw new NotImplementedException("Unknown type of datum."),
                });
            }

            return sb.ToString();
        }

        public string Create(PartialClassDatum classDatum)
        {
            var sb = new StringBuilder();
            sb.Append(StringBuilderSourceCreatorHelper.GetAutoGeneratedString())
                .AppendLine(Create(classDatum.MethodData));

            var methodSource = sb.ToString();

            return StringBuilderSourceCreatorHelper.GetPartialClass(
                classDatum.NamespaceName,
                classDatum.Name,
                classDatum.AccessModifier,
                classDatum.AncestorClasses,
                methodSource);
        }

        public string Create(SingleExpressionDictionaryImplMethodDatum methodDatum) => SourceCreatorHelpers.GetMapMembers(methodDatum, false, StringBuilderWhenChangedSourceCreatorHelper.GetWhenChangedMapMethod);

        public string Create(SingleExpressionOptimizedImplMethodDatum methodDatum)
        {
            var sb = new StringBuilder();
            foreach (var (name, inputType, outputType) in methodDatum.Members)
            {
                sb.Append(StringBuilderSourceCreatorHelper.GetMapEntryChain(inputType, outputType, name));
            }

            return StringBuilderWhenChangedSourceCreatorHelper.GetPartialClassWhenChangedMethodForDirectReturn(methodDatum.InputTypeName, methodDatum.OutputTypeName, methodDatum.AccessModifier, methodDatum.Members);
        }

        public string Create(MultiExpressionMethodDatum methodDatum)
        {
            var expressionParameters = StringBuilderSourceCreatorHelper.GetMultiExpressionMethodParameters(methodDatum.InputType.ToDisplayString(), methodDatum.OutputType.ToDisplayString(), methodDatum.TempReturnTypes);
            var body = StringBuilderSourceCreatorHelper.GetMultiExpressionMethodBodyForPartialClass(methodDatum.TempReturnTypes.Count);

            return StringBuilderWhenChangedSourceCreatorHelper.GetMultiExpressionMethodForPartialClass(methodDatum.InputType.ToDisplayString(), methodDatum.OutputType.ToDisplayString(), methodDatum.AccessModifier, expressionParameters, body);
        }
    }
}
